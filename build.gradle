plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

//'io.spring.dependency-management' : Gradle에서 Maven의 dependencyManagement 기능을 사용할 수 있도록 함.

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

// 특정 BOM 파일을 가져와서 해당 BOM에 정의된 의존성 버전을 프로젝트에 적용.
// 이거 사용하면 아래 dependencies 작성할 때 버전 따로 입력 안해도 BOM에 정해진 최적 버전으로 적용됨.
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.5"
    }
}

//configurations 블록 :  Gradle에서 의존성 구성을 정의. 각 구성은 특정 빌드 단계에서 어떻게 의존성이 처리될지를 지정.
configurations {
    // conpileOnly : 컴파일할 때는 필요하지만, 런타임 시에는 필요하지 않은 의존성을 추가할 때 사용
    compileOnly {
        // extendsFrom : 한 구성이 다른 구성의 의존성을 상속받도록 함.
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    implementation 'org.springframework.boot:spring-boot-starter-web'// persistence-api 포함.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

//lombok
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor 'com.querydsl:querydsl-apt:jpa'

}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main{
        java{
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generaged"]
        }
    }
}
