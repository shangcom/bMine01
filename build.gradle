
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}


plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    // 이니셜라이저에서 lombok 체크함으로써 추가 가능하나, 테스트 환경에는 적용되지 않음으로 따로 설정해주어야 한다.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 타임리프의 확장 기능. ultraq에서 만든 것.
    // Thymeleaf용 다이얼렉트로, 코드 재사용성을 향상시키기 위해 레이아웃과 재사용 가능한 템플릿을 구축할 수 있게 해줌.
    // starter에 tymeleaf 있어도 따로 이렇게 추가해줘야 한다.
    // https://github.com/ultraq/thymeleaf-layout-dialect/
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"

    annotationProcessor(

            "javax.persistence:javax.persistence-api",

            "javax.annotation:javax.annotation-api",

            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")


    // 모델매퍼. 객체간 변환 편하게 하기 위해 사용. 여기서는 엔티티와 dto간 변환 위해.
    implementation 'org.modelmapper:modelmapper:3.1.0'


}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
